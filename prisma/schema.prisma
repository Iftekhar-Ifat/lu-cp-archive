// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  image               String?
  user_name           String   @unique
  user_type           UserType @default(STANDARD)
  cf_handle           String?
  show_on_leaderboard Boolean  @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  addedContest  contests[]
  contestStatus contest_status[]
  problems      problems[]
  problemStatus problem_status[]
  cf_problems   cf_problems[]
  leaderboards  leaderboards[]
}

enum UserType {
  STANDARD
  POWER
  ADMIN
}

model contests {
  id          String           @id @default(cuid())
  title       String
  url         String
  description String
  difficulty  Difficulty
  tags        contests_tags[]
  status      contest_status[]
  type        ContestType
  approved    Boolean          @default(false)
  added_by    String
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt

  addedBy users @relation(fields: [added_by], references: [id])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ContestType {
  intra_lu_contests
  marathon_contests
  short_contests
}

model contest_status {
  status     StatusType?
  user_id    String
  contest_id String

  userId    users    @relation(fields: [user_id], references: [id])
  contestId contests @relation(fields: [contest_id], references: [id], onDelete: Cascade)

  @@id([user_id, contest_id])
}

enum StatusType {
  DONE
  InProgress
  SKIPPED
}

model contests_tags {
  contest_id String
  tag_id     String

  contestId contests @relation(fields: [contest_id], references: [id], onDelete: Cascade)
  tagId     tags     @relation(fields: [tag_id], references: [id])

  @@id([contest_id, tag_id])
}

model tags {
  id         String   @id @default(cuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  contestTags  contests_tags[]
  problem_tags problem_tags[]
}

model topics {
  id          String   @id @default(cuid())
  title       String   @unique
  description String
  slug        String   @unique
  approved    Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  problems problems[]
}

model problems {
  id          String           @id @default(cuid())
  title       String
  url         String
  description String
  difficulty  Difficulty
  tags        problem_tags[]
  status      problem_status[]
  topic       String
  approved    Boolean          @default(false)
  added_by    String
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt

  addedBy      users  @relation(fields: [added_by], references: [id])
  relatedTopic topics @relation(fields: [topic], references: [id])
}

model problem_status {
  status     StatusType?
  user_id    String
  problem_id String

  userId    users    @relation(fields: [user_id], references: [id])
  problemId problems @relation(fields: [problem_id], references: [id], onDelete: Cascade)

  @@id([user_id, problem_id])
}

model problem_tags {
  problem_id String
  tag_id     String

  problemId problems @relation(fields: [problem_id], references: [id], onDelete: Cascade)
  tagId     tags     @relation(fields: [tag_id], references: [id])

  @@id([problem_id, tag_id])
}

model cf_problems {
  id               String   @id @default(cuid())
  title            String
  url              String
  difficulty_level Int
  approved         Boolean  @default(false)
  added_by         String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  addedBy users @relation(fields: [added_by], references: [id])
}

model leaderboards {
  id                String @id @default(cuid())
  user_id           String
  month             Int // 1-12
  year              Int
  generated_points  Float
  additional_points Float
  total_points      Float
  rank              Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user users @relation(fields: [user_id], references: [id])

  @@unique([user_id, month, year])
}
